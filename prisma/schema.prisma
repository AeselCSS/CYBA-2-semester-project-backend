generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// models
model Customer {
  id        String   @id @unique
  role      Role
  firstName String   @map(name: "first_name")
  lastName  String   @map(name: "last_name")
  address   String
  city      String
  zip       Int
  phone     Int
  email     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  cars      Car[]
  orders    Order[]
}

model Car {
  id                   Int       @id @default(autoincrement())
  customerId           String    @map(name: "customer_id")
  registrationNumber   String    @map(name: "registration_number")
  vinNumber            String    @unique @map(name: "vin_number")
  brand                String
  model                String
  modelVariant         String    @map(name: "model_variant")
  firstRegistration    DateTime  @map(name: "first_registration")
  mileage              Int
  lastInspectionDate   DateTime? @map(name: "last_inspection_date")
  lastInspectionResult String?   @map(name: "last_inspection_result")
  lastInspectionKind   String?   @map(name: "last_inspection_kind")
  createdAt            DateTime  @default(now()) @map(name: "created_at")
  updatedAt            DateTime  @updatedAt @map(name: "updated_at")
  customer             Customer  @relation(fields: [customerId], references: [id])
  orders               Order[]
}

model Employee {
  id                   String                @id @unique
  role                 Role
  department           Department
  firstName            String                @map(name: "first_name")
  lastName             String                @map(name: "last_name")
  createdAt            DateTime              @default(now()) @map(name: "created_at")
  updatedAt            DateTime              @updatedAt @map(name: "updated_at")
  taskInstances        TaskInstance[]
  taskInstanceComments TaskInstanceComment[]
}

model Order {
  id             Int            @id @default(autoincrement())
  status         Status
  orderStartDate DateTime       @map(name: "order_start_date")
  carId          Int            @map(name: "car_id")
  customerId     String         @map(name: "customer_id")
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  updatedAt      DateTime       @updatedAt @map(name: "updated_at")
  car            Car            @relation(fields: [carId], references: [id])
  customer       Customer       @relation(fields: [customerId], references: [id])
  taskInstances  TaskInstance[]
}

model Task {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  taskInstances TaskInstance[]
  taskSubtasks  TaskSubtask[]
}

model Subtask {
  id               Int               @id @default(autoincrement())
  name             String
  time             Float             @db.Float
  description      String
  taskSubtasks     TaskSubtask[]
  subtaskInstances SubtaskInstance[]
}

model TaskSubtask {
  taskId        Int     @map(name: "task_id")
  subtaskId     Int     @map(name: "subtask_id")
  subtaskNumber Int     @map(name: "subtask_number")
  task          Task    @relation(fields: [taskId], references: [id])
  subtask       Subtask @relation(fields: [subtaskId], references: [id])

  @@id([taskId, subtaskId])
}

model TaskInstance {
  id                   Int                   @id @default(autoincrement())
  status               Status
  taskId               Int                   @map(name: "task_id")
  employeeId           String?               @map(name: "employee_id")
  orderId              Int                   @map(name: "order_id")
  createdAt            DateTime              @default(now()) @map(name: "created_at")
  updatedAt            DateTime              @updatedAt @map(name: "updated_at")
  task                 Task                  @relation(fields: [taskId], references: [id])
  employee             Employee?             @relation(fields: [employeeId], references: [id])
  order                Order                 @relation(fields: [orderId], references: [id])
  subtaskInstances     SubtaskInstance[]
  taskInstanceComments TaskInstanceComment[]
}

model SubtaskInstance {
  id             Int          @id @default(autoincrement())
  status         Status
  taskInstanceId Int          @map(name: "task_instance_id")
  subtaskId      Int          @map(name: "subtask_id")
  createdAt      DateTime     @default(now()) @map(name: "created_at")
  updatedAt      DateTime     @updatedAt @map(name: "updated_at")
  taskInstance   TaskInstance @relation(fields: [taskInstanceId], references: [id])
  subtask        Subtask      @relation(fields: [subtaskId], references: [id])
}

model TaskInstanceComment {
  id             Int          @id @default(autoincrement())
  comment        String
  employeeId     String       @map(name: "employee_id")
  taskInstanceId Int          @map(name: "task_instance_id")
  createdAt      DateTime     @default(now()) @map(name: "created_at")
  employee       Employee     @relation(fields: [employeeId], references: [id])
  taskInstance   TaskInstance @relation(fields: [taskInstanceId], references: [id])
}

// enums
enum Status {
  AWAITING_CUSTOMER
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum Department {
  MECHANICAL_WORKSHOP
  BODY_WORKSHOP
  PAINT_SHOP
  ADMINISTRATION
}
